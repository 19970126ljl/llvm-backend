//===-- LegISelDAGToDAG.cpp - A dag to dag inst selector for Leg ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Leg target.
//
//===----------------------------------------------------------------------===//

#include "Leg.h"
#include "LegTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

/// LegDAGToDAGISel - Leg specific code to select Leg machine
/// instructions for SelectionDAG operations.
///
namespace {
class LegDAGToDAGISel : public SelectionDAGISel {
  const LegSubtarget &Subtarget;

public:
  explicit LegDAGToDAGISel(LegTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(*TM.getSubtargetImpl()) {}

  SDNode *Select(SDNode *N);

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset);

  virtual const char *getPassName() const {
    return "Leg DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "LegGenDAGISel.inc"
};
} // end anonymous namespace

bool LegDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(),
                                       getTargetLowering()->getPointerTy());
    Offset = CurDAG->getTargetConstant(0, MVT::i32);
    return true;
  }
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress)
    return false; // direct calls.

  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, MVT::i32);
  return true;
}

SDNode *LegDAGToDAGISel::Select(SDNode *N) {
  return SelectCode(N);
}

/// createLegISelDag - This pass converts a legalized DAG into a
/// Leg-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createLegISelDag(LegTargetMachine &TM,
                                     CodeGenOpt::Level OptLevel) {
  return new LegDAGToDAGISel(TM, OptLevel);
}

